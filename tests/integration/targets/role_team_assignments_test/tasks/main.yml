---
- name: Generate a unique test ID
  ansible.builtin.set_fact:
    test_id: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
  when: test_id is not defined

- name: Run Test
  module_defaults:
    group/ansible.platform.gateway:
      gateway_hostname: "{{ gateway_hostname }}"
      gateway_username: "{{ gateway_username }}"
      gateway_password: "{{ gateway_password }}"
      gateway_validate_certs: "{{ gateway_validate_certs | bool }}"

- name: Preset variables for test resource names
  ansible.builtin.set_fact:
    organization_name: "GW-Collection-Test-Organization-{{ test_id }}"
    team_name_prefix: "GW-Collection-Test-Team-{{ test_id }}"
    rh_username: "rta_user"

  block:
    # --------------------------------------------------------------------------
    # Organizations
    # --------------------------------------------------------------------------
    - name: Create Organization 1
      ansible.platform.organization:
        name: "{{ organization_name }}-1"
      register: org1

    - name: Create Organization 2
      ansible.platform.organization:
        name: "{{ organization_name }}-2"
      register: org2

    - name: Create Organization 3
      ansible.platform.organization:
        name: "{{ organization_name }}-3"
      register: org3

    - name: Create Organization 4
      ansible.platform.organization:
        name: "{{ organization_name }}-4"
      register: org4

    - name: Assert organizations were created
      ansible.builtin.assert:
        that:
          - org1 is changed
          - org2 is changed
          - org3 is changed
          - org4 is changed

    # --------------------------------------------------------------------------
    # Teams
    # --------------------------------------------------------------------------
    - name: Create Team 1 in Organization 1
      ansible.platform.team:
        name: "{{ team_name_prefix }}-Team-1"
        organization: "{{ org1.name }}"
        description: "Test Team 1"
      register: team1

    - name: Create Team 2 in Organization 2
      ansible.platform.team:
        name: "{{ team_name_prefix }}-Team-2"
        organization: "{{ org2.name }}"
        description: "Test Team 2"
      register: team2

    - name: Create Team 3 in Organization 3
      ansible.platform.team:
        name: "{{ team_name_prefix }}-Team-3"
        organization: "{{ org3.name }}"
        description: "Test Team 3"
      register: team3

    - name: Create Team 4 in Organization 4
      ansible.platform.team:
        name: "{{ team_name_prefix }}-Team-4"
        organization: "{{ org4.name }}"
        description: "Test Team 3"
      register: team4

    - name: Assert that teams were created
      ansible.builtin.assert:
        that:
          - team1 is changed
          - team2 is changed
          - team3 is changed
          - team4 is changed
    # 1. Assign Org Admin role to Team1 on Org1 (Global role can't be assigned)
    - name: Assign Org Admin to Team1 on Org1
      ansible.platform.role_team_assignment:
        assignment_objects:
          - name: "{{ org1.name }}"
            type: "organizations"
        role_definition: Organization Admin
        team: "{{ team1.id }}"
      register: org_admin_assignment_1
      ignore_errors: true  # this may fail depending on AAP limitations

    # 2. Assign Platform role to Team3 on Org3 (Global role can't be assigned)
    - name: Assign Platform Auditor to Team1 on Org1
      ansible.platform.role_team_assignment:
        assignment_objects:
          - name: "{{ org1.name }}"
            type: "organizations"
        role_definition: Platform Auditor
        team: "{{ team1.name }}"
      register: org_admin_assignment_2
      ignore_errors: true  # this may fail depending on AAP limitations

    # Role-Team Assignment Lifecycle
    - name: Derive names/descriptions from rh_username
      ansible.builtin.set_fact:
        org_name: "ENG-ORG-{{ rh_username }}"
        team_name: "APAC-BLR-{{ rh_username }}"
        test_role_name: "GW-Collection-Test-Role-{{ rh_username }}"
        org_description: "Engineering org for {{ rh_username }}"
        team_description: "Team APAC-BLR for {{ rh_username }}"

    # 1) Pre-step: ensure a org exists
    - name: Create platform organization
      ansible.platform.organization:
        name: "{{ org_name }}"
        description: "{{ org_description }}"
        state: present
      register: created

    # 2) Pre-step ensure a team exists
    - name: Create platform team
      ansible.platform.team:
        name: "{{ team_name }}"
        organization: "{{ org_name }}"
        description: "{{ team_description }}"
        state: present
      register: created

    # 2) Pre-step: ensure a role_def exists
    - name: Create org-scoped role definition (Organization Inventory Admin)
      ansible.platform.role_definition:
        name: "Organization Inventory Admin"
        description: "Org-scoped role that grants full inventory admin on Controller resources"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: present
      register: org_inv_admin_role

    - name: Assert role exists (created or already present)
      ansible.builtin.assert:
        that:
          - org_inv_admin_role is changed or org_inv_admin_role is not changed

    # 3) Assign Role to a team
    - name: Assign Org Inventory Admin to Team2 on Org1 and Org2
      ansible.platform.role_team_assignment: &rta_present
        assignment_objects:
          - name: "{{ org_name }}"
            type: "organizations"
        role_definition: "Organization Inventory Admin"
        team: "{{ team_name }}"
        state: present
      register: org_admin_assignment_3

    - name: Assert Team2 Org Inventory Admin assignment worked
      ansible.builtin.assert:
        that:
          - org_admin_assignment_3 is changed or org_admin_assignment_3 is not failed

    # 3) Re-run → idempotent
    - name: Re-assign same role to same team
      ansible.platform.role_team_assignment: *rta_present
      register: idem

    - name: Assert idempotency
      ansible.builtin.assert:
        that: ["idem is not changed"]

    # Remove Role-Team Assignment
    - name: Derive names/descriptions from rh_username
      ansible.builtin.set_fact:
        org_name: "ENG-ORG-{{ rh_username }}"           # must exist (from org tests / or already part of this test)
        team_name: "APAC-BLR-{{ rh_username }}"         # must exist (from team tests / or already part of this test)
        test_role_name: "GW-Collection-Test-Role-{{ rh_username }}"
        org_description: "Engineering org for {{ rh_username }}"
        team_description: "Team APAC-BLR for {{ rh_username }}"
        assignment_obj:
          - name: "{{ org_name }}"
            type: "organizations"
    # 1) Pre-step: ensure a org exists
    - name: Create platform organization
      ansible.platform.organization:
        name: "{{ org_name }}"
        description: "{{ org_description }}"
        state: present
      register: created

    # 2) Pre-step ensure a team exists
    - name: Create platform team
      ansible.platform.team:
        name: "{{ team_name }}"
        organization: "{{ org_name }}"
        description: "{{ team_description }}"
        state: present
      register: created

    # 2) Pre-step: ensure a role_def exists
    - name: Create org-scoped role definition (Organization Inventory Admin)
      ansible.platform.role_definition:
        name: "Organization Inventory Admin"
        description: "Org-scoped role that grants full inventory admin on Controller resources"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: present
      register: org_inv_admin_role

    - name: Assert role exists (created or already present)
      ansible.builtin.assert:
        that:
          - org_inv_admin_role is changed or org_inv_admin_role is not changed

    # 3) Assign Role to a team
    - name: Assign Org Inventory Admin to Team2 on Org1 and Org2
      ansible.platform.role_team_assignment: &rta_remove
        assignment_objects:
          - name: "{{ org_name }}"
            type: "organizations"
        role_definition: "Organization Inventory Admin"
        team: "{{ team_name }}"
        state: absent
      register: org_admin_assignment

    - name: Assert Team Org Inventory Admin assignment worked
      ansible.builtin.assert:
        that:
          - org_admin_assignment is changed or org_admin_assignment is not failed

    # 3) Re-run → idempotent
    - name: Remove team assignment
      ansible.platform.role_team_assignment: *rta_remove
      register: idem

    - name: Assert idempotency
      ansible.builtin.assert:
        that: ["idem is not changed"]

    # Cleanup role_def
    - name: Cleanup role_def
      ansible.platform.role_definition:
        name: "Organization Inventory Admin"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: absent

    - name: Delete org
      ansible.platform.organization: &org_delete
        name: "{{ org_name }}"
        state: absent
      register: deleted

    - name: Delete team
      ansible.platform.team: &team_delete
        name: "{{ team_name }}"
        organization: "{{ org_name }}"
        state: absent
      register: deleted

    # Assign org-scoped role to a team across multiple orgs
    - name: Derive names/descriptions from rh_username
      ansible.builtin.set_fact:
        org1: "ENG-ORG-A-{{ rh_username }}"
        org2: "ENG-ORG-B-{{ rh_username }}"
        team_name: "APAC-BLR-{{ rh_username }}"
        role_name: "Organization Inventory Admin"

    - name: Ensure org1 exists
      ansible.platform.organization:
        name: "{{ org1 }}"
        description: "Org A for {{ rh_username }}"
        state: present
    - name: Ensure org2 exists
      ansible.platform.organization:
        name: "{{ org2 }}"
        description: "Org B for {{ rh_username }}"
        state: present
    # Team
    - name: Ensure team exists in org1 (membership org doesn not matter for assignment scope)
      ansible.platform.team:
        name: "{{ team_name }}"
        organization: "{{ org1 }}"
        description: "Team for multi-org assignment"
        state: present

    # Role definition (org-scoped)
    - name: Ensure org-scoped role definition exists
      ansible.platform.role_definition:
        name: "{{ role_name }}"
        description: "Org-scoped inventory admin"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: present

    # Assign across two orgs in one call
    - name: Assign role to team on org1 and org2
      ansible.platform.role_team_assignment: &assign_multi
        assignment_objects:
          - name: "{{ org1 }}"
            type: "organizations"
          - name: "{{ org2 }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_name }}"
        state: present
      register: assign_res

    - name: Assert assignment created or already present
      ansible.builtin.assert:
        that:
          - assign_res is changed or assign_res is not failed

    # Idempotency
    - name: Re-run multi-org assignment (idempotent)
      ansible.platform.role_team_assignment: *assign_multi
      register: assign_again

    - name: Assert idempotency
      ansible.builtin.assert:
        that:
          - assign_again is not changed

      # Reassign org-scoped role from Team A to Team B
    - name: Derive names/descriptions from rh_username
      ansible.builtin.set_fact:
        org_name: "ENG-ORG-MOVE-{{ rh_username }}"
        team_a: "APAC-BLR-A-{{ rh_username }}"
        team_b: "APAC-BLR-B-{{ rh_username }}"
        role_name: "Organization Inventory Admin"

      # Preconditions
    - name: Ensure org exists
      ansible.platform.organization:
        name: "{{ org_name }}"
        description: "Reassignment org"
        state: present

    - name: Ensure team A exists
      ansible.platform.team:
        name: "{{ team_a }}"
        organization: "{{ org_name }}"
        description: "Source team"
        state: present

    - name: Ensure team B exists
      ansible.platform.team:
        name: "{{ team_b }}"
        organization: "{{ org_name }}"
        description: "Destination team"
        state: present

    - name: Ensure role definition exists
      ansible.platform.role_definition:
        name: "{{ role_name }}"
        description: "Org-scoped inventory admin"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: present

    # Assign to Team A
    - name: Assign role to Team A on org
      ansible.platform.role_team_assignment:
        assignment_objects:
          - name: "{{ org_name }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_a }}"
        state: present

    # Remove from Team A
    - name: Remove role assignment from Team A
      ansible.platform.role_team_assignment:
        assignment_objects:
          - name: "{{ org_name }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_a }}"
        state: absent
      register: removed_a

    - name: Assert removal changed
      ansible.builtin.assert:
        that:
          - removed_a is changed

    # Assign to Team B
    - name: Assign role to Team B on org
      ansible.platform.role_team_assignment: &assign_to_b
        assignment_objects:
          - name: "{{ org_name }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_b }}"
        state: present
      register: added_b

    - name: Assert assignment to Team B changed or present
      ansible.builtin.assert:
        that:
          - added_b is changed or added_b is not failed

    # Idempotency on Team B
    - name: Re-run assignment to Team B (idempotent)
      ansible.platform.role_team_assignment: *assign_to_b
      register: b_idem

    - name: Assert Team B idempotent
      ansible.builtin.assert:
        that:
          - b_idem is not changed

    # Assign org-scoped role to a team across multiple orgs
    - name: Derive names/descriptions from rh_username
      ansible.builtin.set_fact:
        org1: "ENG-ORG-DEL-A-{{ rh_username }}"
        org2: "ENG-ORG-DEL-B-{{ rh_username }}"
        team_name: "APAC-BLR-DEL-{{ rh_username }}"
        role_name: "Organization Inventory Admin"

    # Preconditions (create + assign so we can remove)
    - name: Ensure org1 exists
      ansible.platform.organization:
        name: "{{ org1 }}"
        description: "Delete test org A"
        state: present
    - name: Ensure org2 exists
      ansible.platform.organization:
        name: "{{ org2 }}"
        description: "Delete test org B"
        state: present

    - name: Ensure team exists
      ansible.platform.team:
        name: "{{ team_name }}"
        organization: "{{ org1 }}"
        description: "Delete test team"
        state: present

    - name: Ensure role definition exists
      ansible.platform.role_definition:
        name: "{{ role_name }}"
        description: "Org-scoped inventory admin"
        content_type: shared.organization
        permissions:
          - awx.view_inventory
          - awx.add_inventory
          - awx.change_inventory
          - awx.delete_inventory
        state: present

    - name: Seed assignments on both orgs (present)
      ansible.platform.role_team_assignment:
        assignment_objects:
          - name: "{{ org1 }}"
            type: "organizations"
          - name: "{{ org2 }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_name }}"
        state: present

    # Bulk remove (absent)
    - name: Remove assignments from both orgs
      ansible.platform.role_team_assignment: &bulk_absent
        assignment_objects:
          - name: "{{ org1 }}"
            type: "organizations"
          - name: "{{ org2 }}"
            type: "organizations"
        role_definition: "{{ role_name }}"
        team: "{{ team_name }}"
        state: absent
      register: del_res

    - name: Assert removal changed
      ansible.builtin.assert:
        that:
          - del_res is changed

    # Idempotent absent
    - name: Re-run bulk absent (idempotent)
      ansible.platform.role_team_assignment: *bulk_absent
      register: del_again

    - name: Assert bulk removal idempotent
      ansible.builtin.assert:
        that:
          - del_again is not changed
  always:

    # ----------------------------------------------------------------------
    # Cleanup
    # ----------------------------------------------------------------------
    - name: Delete test teams
      ansible.platform.team:
        name: "{{ item.name }}"
        organization: "{{ item.organization }}"
        state: absent
      loop:
        - { name: "{{ team1.name }}", organization: "{{ org1.name }}" }
        - { name: "{{ team2.name }}", organization: "{{ org2.name }}" }
        - { name: "{{ team3.name }}", organization: "{{ org3.name }}" }
        - { name: "{{ team4.name }}", organization: "{{ org4.name }}" }

    - name: Delete test organizations
      ansible.platform.organization:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ org1.name }}"
        - "{{ org2.name }}"
        - "{{ org3.name }}"
        - "{{ org4.name }}"
...
