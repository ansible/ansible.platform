from ..module_utils.aap_service import AAPService

__metaclass__ = type


class AAPUIPluginRoute(AAPService):
    API_ENDPOINT_NAME = "ui_plugin_routes"
    ITEM_TYPE = "ui_plugin_route"

    def unique_field(self):
        return self.module.IDENTITY_FIELDS["ui_plugin_routes"]

    def set_new_fields(self):
        # Set common fields from parent
        self.set_name_field()

        # Handle the UI plugin specific field
        ui_plugin_path = self.params.get('ui_plugin_path')
        if ui_plugin_path is not None:
            self.new_fields['ui_plugin_path'] = ui_plugin_path

        # Handle service cluster relationship
        if self.service_cluster:
            service_cluster_id = (self.service_cluster.data or {}).get('id')
            if service_cluster_id is not None:
                self.new_fields['service_cluster'] = service_cluster_id

        # Handle HTTP port relationship  
        if self.http_port:
            http_port_id = (self.http_port.data or {}).get('id')
            if http_port_id is not None:
                self.new_fields['http_port'] = http_port_id

        # Handle other route fields
        description = self.params.get('description')
        if description is not None:
            self.new_fields['description'] = description

        is_service_https = self.params.get('is_service_https')
        if is_service_https is not None:
            self.new_fields['is_service_https'] = is_service_https

        service_port = self.params.get('service_port')
        if service_port is not None:
            self.new_fields['service_port'] = service_port

        order = self.params.get('order')
        if order is not None:
            self.new_fields['order'] = order

        node_tags = self.params.get('node_tags')
        if node_tags is not None:
            self.new_fields['node_tags'] = node_tags

        # NOTE: gateway_path, service_path, enable_gateway_auth, and is_internal_route
        # are read-only fields that are auto-generated by the API 